import random
import time
import re
import textwrap
import compose_sentence
import riddles
from riddles import riddles_data
import tic_tac_toe
FILENAME_PROGRESS = "progress.txt"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä—ã
def load_progress():
    try:
        with open("progress.txt", "r") as file:
            level = None
            lives = None
            for line in file:
                match_level = re.match(r"level: (\d+)", line)
                match_lives = re.match(r"lives: (\d+)", line)
                if match_level:
                    level = int(match_level.group(1))
                elif match_lives:
                    lives = int(match_lives.group(1))
            if level is not None and lives is not None:
                return level, lives
            else:
                raise ValueError("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ")
    except FileNotFoundError:
        print("–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return 1, 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä—ã
def save_progress(level, lives):
    current_level, current_lives = load_progress()
    lives += current_lives
    with open("progress.txt", "w") as file:
        file.write(f"level: {level}\n")
        file.write(f"lives: {lives}\n")

# –û–±–Ω—É–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
def reset_progress():
    with open("progress.txt", "w") as file:
        file.write("level: 0\n")
        file.write("lives: 0\n")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
def read_support_words(filename):
    with open(filename, "r", encoding="utf-8") as file:
        support_words = file.readlines()
    return [word.strip() for word in support_words]

def get_shuffled_string(input_string):
    shuffled_string = ''.join(random.sample(input_string, len(input_string)))
    return shuffled_string

# –§—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã –≤ –í–∏—Å–µ–ª–∏—Ü—É
def play_guess_riddle(level, lives, current_level):
    while True:
        riddles.guess_riddle(riddles_data)

        print("–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ü—Ä–∏–∑—Ä–∞–∫: - –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–±—è –≤ –∏–≥—Ä–µ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ –∏–ª–∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥–∞–¥–∫–æ–π? (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å/–æ—Ç–¥–æ—Ö–Ω—É—Ç—å): ")
        choice = input().lower()
        if choice == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
            return 1
        else:
            rest(level, lives, current_level)
            return 1

            save_progress(current_level, lives)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

# –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–∏—Ä–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
def rest(level, lives, current_level):
    print("–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ø—Ä–∏–∑—Ä–∞–∫: –¥–∞–≤–∞–π –æ—Ç–¥–æ—Ö–Ω–µ–º!")
    pirate_story = read_pirate_story("pirate_story.txt")
    print_with_pause(pirate_story)
    choice = input("–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ü—Ä–∏–∑—Ä–∞–∫: - –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter: ").lower()
    if choice == "":
        return 1
    else:
        print("–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ü—Ä–∏–∑—Ä–∞–∫: - –ø–æ–¥–æ–∂–¥–µ–º –ø–æ–∫–∞ –í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ –ø–∏—Ä–∞—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
def read_pirate_story(filename):
    with open(filename, "r", encoding="utf-8") as file:
        pirate_story = file.read()
    return pirate_story

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ–¥–ª–µ–Ω–Ω–æ
def print_with_pause(text, delay=0.05):
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã –≤ ti tac toe
def play_tic_tac_toe(level, lives, current_level):
    tic_tac_toe.tic_tac_toe()
    return 2

    save_progress(current_level, lives)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∫–∏
def play_compose_sentence(level, lives, current_level):
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    _, lives = load_progress()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∫–∏ —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∂–∏–∑–Ω–µ–π
    attempts = lives

    support_words = read_support_words("support_words.txt")

    while attempts > 0:
        print("\n–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ü—Ä–∏–∑—Ä–∞–∫: - –ø–æ–ø—ã—Ç–æ–∫ —Å–æ–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å–∫—É:", attempts)

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ compose_sentence.py –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∏ —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        success = compose_sentence.two_parts()

        if success:
            break
        else:
            print("\n–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ü—Ä–∏–∑—Ä–∞–∫: - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            attempts -= 1

    if attempts == 0:
        print("\n–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ø—Ä–∏–∑—Ä–∞–∫: –°—É–¥—å–±–∞ –¥–µ–≤–æ—á–µ–∫ –∑–∞–≥—É–±–ª–µ–Ω–∞. –û–Ω–∏ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –∑–∞–ø–ª–∞—Ç–∏—Ç—å 3200 –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç......")
        lives = 0
        level = 0
        save_progress(level, lives)
        print("–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ü—Ä–∏–∑—Ä–∞–∫: - —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ –∂–∏–∑–Ω–µ–π?")
        print("1. –ò–≥—Ä–∞ –≤ –∑–∞–≥–∞–¥–∫–∏")
        print("2. –ò–≥—Ä–∞ –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏")
        print("3. –í—ã–π—Ç–∏")
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–≥—Ä—ã (1/2/3): ")

        if choice == "1":
            # –í—ã–∑–æ–≤ –∏–≥—Ä—ã –≤ –∑–∞–≥–∞–¥–∫–∏
            play_guess_riddle()
        elif choice == "2":
            # –í—ã–∑–æ–≤ –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
            play_tic_tac_toe()
        elif choice == "3":
            print("–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ü—Ä–∏–∑—Ä–∞–∫: - —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω—É—é –∏–≥—Ä—É! –ù–∞–¥–µ—é—Å—å, –µ—â–µ –ø–æ–∏–≥—Ä–∞–µ–º.")
            return
        else:
            print("–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ü—Ä–∏–∑—Ä–∞–∫: - –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
    return 3

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Ä–æ–≤–Ω—è
def start_level2():
    print("*" * 130)
    text = """
                             _                   _     _____       _                    _
                            | |                 | |   |_   _|     | |                  | |
                            | |       ___   ___ | |_    | |   ___ | |  __ _  _ __    __| |
                            | |      / _ \ / __|| __|   | |  / __|| | / _` || '_ \  / _` |
                            | |____ | (_) |\__ \| |_   _| |_ \__ \| || (_| || | | || (_| |
                            |______| \___/ |___/ \__| |_____||___/|_| \__,_||_| |_| \__,_|"""

    print(text)
    print("*" * 130)
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã - –û—Å—Ç—Ä–æ–≤ –ó–∞–≥–∞–¥–æ–∫!üëã")
    while True:  # –¶–∏–∫–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ—Ö–æ–¥–æ–≤ —É—Ä–æ–≤–Ω—è
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞
        ready = input("–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ü—Ä–∏–∑—Ä–∞–∫: - –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∏–≥—Ä–µ? (–Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è)")

        if ready == "":
            level, lives = load_progress()

            # –û—Ç–≥–∞–¥—ã–≤–∞–Ω–∏–µ –∑–∞–≥–∞–¥–æ–∫
            if play_guess_riddle(level, lives, level):
                lives += 3
                level = 1
                save_progress(level, lives)

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
                board = tic_tac_toe.tic_tac_toe()
                if tic_tac_toe.check_winner(board):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
                    lives += 4
                    level = 2
                    save_progress(level, lives)

                # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
                text = ("–ü–∏—Ä–∞—Ç—Å–∫–∏–π –ø—Ä–∏–∑—Ä–∞–∫: - –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–∏—Ä–∞—Ç—Å–∫–∏–π —Å—É–Ω–¥—É–∫!\n"
                        "–í –ø–∏—Ä–∞—Ç—Å–∫–æ–º —Å—É–Ω–¥—É–∫–µ —Ç—ã –Ω–∞—à–µ–ª 6 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —á–∞—Å—Ç—å –∑–∞–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å.")
                wrapped_text = textwrap.fill(text, width=120)
                print(wrapped_text)
                choice = input("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Enter: ").lower()
                if choice == "":
                    # –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∫–∏
                    if not play_compose_sentence(level, lives, level):
                        break  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª

                # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É –ø—Ä–æ–π—Ç–∏ –∏–≥—Ä—É –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ–µ
                while True:
                    choice = input("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ—Å—Ç—Ä–æ–≤ –ó–∞–≥–∞–¥–æ–∫ –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ")
                    if choice.lower() == '–¥–∞':
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ
                    elif choice.lower() == '–Ω–µ—Ç':
                        print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
                        print("*" * 130)
                        text = """
                                                 _                   _     _____       _                    _
                                                | |                 | |   |_   _|     | |                  | |
                                                | |       ___   ___ | |_    | |   ___ | |  __ _  _ __    __| |
                                                | |      / _ \ / __|| __|   | |  / __|| | / _` || '_ \  / _` |
                                                | |____ | (_) |\__ \| |_   _| |_ \__ \| || (_| || | | || (_| |
                                                |______| \___/ |___/ \__| |_____||___/|_| \__,_||_| |_| \__,_|"""

                        print(text)
                        print("*" * 130)
                        reset_progress()
                        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã—Ö–æ–¥—è –∏–∑ –Ω–µ—ë
                    else:
                        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        else:
            print("–•–æ—Ä–æ—à–æ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter.")

        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–¥–æ—Ö–Ω—É—Ç—å
        if not rest(level, lives, level):
            break  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª

if __name__ == "__main__":
    start_level2()
